{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","console","log","fetch","then","json","res","_this","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","this","interval","setInterval","clearInterval","_this2","react_default","a","createElement","className","src","logo","alt","Button_default","variant","color","href","target","rel","length","style","padding","key","type","onChange","e","value","placeholder","width","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.29a04382.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    console.log(1);\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      console.log(2);\n\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    console.log(3);\n\n    fetch('/api/getData')\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id === idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id === idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <Button variant=\"contained\" color=\"primary\">\n            Hello World\n          </Button>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map(dat => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={e => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}